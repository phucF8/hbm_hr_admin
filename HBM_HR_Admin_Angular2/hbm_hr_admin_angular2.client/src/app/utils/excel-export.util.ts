// src/app/utils/excel-export.util.ts

import * as XLSX from 'xlsx-js-style';
import * as FileSaver from 'file-saver';

export function exportToExcel(data: any[]): void {
  const exportData = data.map(item => ({
    'Ti√™u ƒë·ªÅ': item.title,
    'N·ªôi dung': item.content,
    'Ng∆∞·ªùi g·ª≠i': item.tenNhanVien,
    'Ng√†y t·∫°o': formatDate(item.ngayTao), // G·ªçi h√†m formatDate b√™n ngo√†i
    'Ho√†n th√†nh': `${item.receivedCount}/${item.totalRecipients}`,
    'Lo·∫°i th√¥ng b√°o': item.notificationType == 1 ? 'T·ª± ƒë·ªông' : 'Ch·ªß ƒë·ªông',
    'Nh√≥m th√¥ng b√°o': item.loaiThongBao
  }));

  const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(exportData);

  worksheet['!cols'] = [
    { wch: 15 }, // Ti√™u ƒë·ªÅ
    { wch: 70 }, // N·ªôi dung
    { wch: 25 }, // Ng∆∞·ªùi g·ª≠i
    { wch: 15 }, // Ng√†y t·∫°o
    { wch: 20 }, // Ho√†n th√†nh
    { wch: 15 }, // Lo·∫°i th√¥ng b√°o
    { wch: 20 }  // Nh√≥m th√¥ng b√°o
  ];

  const headerCells = ['A1','B1','C1','D1','E1','F1','G1'];
  headerCells.forEach(cell => {
    if (!worksheet[cell]) return;
    worksheet[cell].s = {
      font: { bold: true },
      alignment: { horizontal: 'center', vertical: 'center' }
    };
  });

  for (let row = 2; row <= data.length + 1; row++) {
    ['A','C','D','E','F','G'].forEach(col => {
      const cellAddress = `${col}${row}`;
      if (!worksheet[cellAddress]) return;
      worksheet[cellAddress].s = {
        alignment: { horizontal: 'center', vertical: 'center' }
      };
    });
  }

  const workbook: XLSX.WorkBook = { Sheets: { 'Th√¥ng B√°o': worksheet }, SheetNames: ['Th√¥ng B√°o'] };
  const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  const blob: Blob = new Blob([excelBuffer], { type: 'application/octet-stream' });

  const now = new Date();
  const timestamp = now.getFullYear() + '-' +
                    String(now.getMonth() + 1).padStart(2, '0') + '-' +
                    String(now.getDate()).padStart(2, '0') + '_' +
                    String(now.getHours()).padStart(2, '0') + '-' +
                    String(now.getMinutes()).padStart(2, '0') + '-' +
                    String(now.getSeconds()).padStart(2, '0');

  const filename = `Thong Bao_${timestamp}.xlsx`;
  FileSaver.saveAs(blob, filename);
}

// üëâ formatDate function c·∫ßn chuy·ªÉn ra file utils ho·∫∑c truy·ªÅn t·ª´ b√™n ngo√†i
function formatDate(date: any): string {
  if (!date) return '';
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
}
